// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/index.html
// templates/package.html
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x54\x4f\x6f\xd3\x30\x14\xbf\x23\xf1\x1d\x1e\x56\x77\x23\x7e\x08\x71\x9a\x9c\x72\x60\x68\x1c\x90\xa8\x06\x1c\x38\xba\xf6\x4b\xec\xd5\xb1\x2b\xdb\xe9\xa8\xa6\x7c\x77\xd4\x2c\x85\x2a\x25\x59\x25\x44\x2e\x89\xe3\xdf\x1f\xfb\xd9\xef\x27\x5e\xdd\x7c\xf9\xf0\xed\xc7\xea\x23\x98\xdc\xb8\xe5\xcb\x17\x62\x78\x03\x00\x08\x43\x52\x0f\xdf\xfd\xd8\x59\xbf\x81\x48\xae\x64\x29\xef\x1d\x25\x43\x94\x19\x98\x48\x55\xc9\x4c\xce\xdb\x74\x8d\xa8\xb4\xbf\x4f\x5c\xb9\xd0\xea\xca\xc9\x48\x5c\x85\x06\xe5\xbd\xfc\x89\xce\xae\x13\xa6\x0d\x39\xca\xc1\xe3\x5b\xfe\x86\xbf\xfb\x3d\xe4\x8d\xf5\x5c\xa5\xc4\x00\x8f\xe6\x78\xe2\x2e\xd6\x41\xef\x4f\x57\xa2\xed\x0e\x94\x93\x29\x95\x4c\x05\x9f\xa5\xf5\x14\xd9\x09\x60\x0c\x8a\xe1\x61\x3c\xdd\x43\xb2\x5c\x3b\x3a\x82\xda\xa2\x6a\x9d\x2b\x1e\xac\xce\xe6\x6f\xe8\x27\xc6\xa8\x28\xe7\x80\x38\x33\x3b\x48\x2c\x57\x52\x6d\x64\x4d\x02\xb3\xb9\x00\xfd\x35\xb4\x51\x5d\x0a\xbe\x09\xaa\x6d\xc8\x67\x99\x6d\xf0\xcf\x70\x04\x4e\xae\xf6\xc0\x9c\xde\xa9\xc8\xa3\x13\x19\x3f\x8f\x8f\x10\xa5\xaf\x09\x16\x1b\xda\xbf\x86\xc5\x4e\xba\x96\xe0\xba\x04\x3e\x6c\x3d\x41\xd7\xcd\xd2\x17\xb6\xd9\x86\x98\x57\x32\x9b\x03\x6f\x1b\xad\xcf\x15\xb0\xab\x1d\x5e\xed\x18\x2c\xf8\xf7\xbb\xcf\xbd\xf8\xac\xce\x25\xa7\xa1\x97\x23\xb7\xae\x13\x98\xe7\xce\xf8\xc8\x9b\x47\xf4\x28\x39\xb4\x07\xe2\xc1\xa4\xaf\x02\xbf\xa3\x6d\x80\xae\x63\xcb\xb3\x5f\x02\xe5\x73\xb6\xff\x69\x65\xfc\x36\xe8\xa0\xf8\xa7\x90\x32\x74\x1d\x9e\x55\x64\xaa\x1f\xce\x64\x6d\x53\x43\x8a\xea\xa0\x6b\x9b\x9a\x27\x63\xc9\xe9\xc4\x6d\xc0\xb5\xd4\x35\x61\x7d\xf0\x29\x22\x55\x14\xc9\x2b\x2a\xd6\xae\xa5\xf7\x7d\x9c\x94\x55\x88\x45\x36\x54\xf4\x40\x06\xd2\xe5\x92\xdd\x86\x9b\xa0\xfe\xa4\xc2\x7c\x69\xfe\xb1\x78\x33\xdd\x00\x4f\x77\x92\xbc\x9e\xbc\x6e\x02\xa7\x7a\x42\x60\x1f\x33\xe3\x78\x42\x6d\x77\xa7\x99\x76\x32\x16\x38\x48\x09\x1c\xf2\xf8\x57\x00\x00\x00\xff\xff\xb8\xca\x75\x99\xa9\x05\x00\x00")

func templatesIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexHtml,
		"templates/index.html",
	)
}

func templatesIndexHtml() (*asset, error) {
	bytes, err := templatesIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.html", size: 1449, mode: os.FileMode(438), modTime: time.Unix(1622790802, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesPackageHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xd1\xc1\x4a\xc4\x30\x10\x06\xe0\xbb\xe0\x3b\x8c\xf5\xbc\x8d\x77\xd3\x3d\xb8\x8a\x97\x45\x97\x45\x0f\x1e\x63\xfb\xb7\x09\xa4\x99\x9a\x4e\x17\xa4\xe4\xdd\xa5\x6e\x17\x2a\x28\xee\x29\x93\x21\x7c\xf9\x99\xd1\x57\xf7\xcf\x9b\x97\xb7\xdd\x03\x59\x69\xfd\xfa\xf2\x42\xcf\x27\x11\x91\xb6\x30\xd5\x5c\x7f\xdf\x5b\x88\xa1\x60\x5a\x14\x59\xc3\x2b\xd7\x76\x1c\x25\xa3\x92\x83\x20\x48\x91\x8d\x23\xe5\x1b\x13\x38\xb8\xd2\xf8\xd7\xfd\x96\x52\xa2\xc6\x09\x4d\xfd\x3d\x3a\xa6\x94\xb2\xbf\xb9\x9e\x87\x58\xe2\x1f\x6e\x41\x2d\x6b\x25\x11\x50\x53\xe3\x2e\x9a\x50\x5a\x4a\x69\x54\x95\x8b\xe7\x3d\x52\x63\xed\x3c\xd2\xf5\x76\xf4\x2e\xe0\x97\x8c\x56\xa4\x5b\xe1\x63\x70\x87\x22\x8b\xa8\x23\x7a\xbb\xc8\x79\x73\x4b\x43\xf4\xc5\x04\x3f\x72\xc5\xe5\x31\xea\x49\xd1\x6a\x31\x45\xfd\xce\xd5\xe7\x82\x7f\x62\xb1\x2e\x34\x24\x4c\x3d\x40\x16\x11\x39\xed\x3c\x4c\x0f\xd2\x86\x6c\x44\x7d\x9c\xc3\x0f\xb8\xe5\x03\xc8\x78\x0e\x8d\x56\x66\x9d\x9f\xfe\x99\x6d\xad\xe6\x15\x7e\x05\x00\x00\xff\xff\xc9\xb5\xaa\x4f\xdc\x01\x00\x00")

func templatesPackageHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesPackageHtml,
		"templates/package.html",
	)
}

func templatesPackageHtml() (*asset, error) {
	bytes, err := templatesPackageHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/package.html", size: 476, mode: os.FileMode(438), modTime: time.Unix(1622790900, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/index.html":   templatesIndexHtml,
	"templates/package.html": templatesPackageHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"index.html":   &bintree{templatesIndexHtml, map[string]*bintree{}},
		"package.html": &bintree{templatesPackageHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
